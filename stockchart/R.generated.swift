//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 3 view controllers.
  struct segue {
    /// This struct is generated for `AlertsViewController`, and contains static references to 1 segues.
    struct alertsViewController {
      /// Segue identifier `alertDetail`.
      static let alertDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AlertsViewController, CanvasViewController> = Rswift.StoryboardSegueIdentifier(identifier: "alertDetail")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `alertDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func alertDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AlertsViewController, CanvasViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.alertsViewController.alertDetail, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `TableViewTestController`, and contains static references to 1 segues.
    struct tableViewTestController {
      /// Segue identifier `editTableViewTestKey`.
      static let editTableViewTestKey: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TableViewTestController, CanvasViewController> = Rswift.StoryboardSegueIdentifier(identifier: "editTableViewTestKey")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `editTableViewTestKey`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func editTableViewTestKey(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TableViewTestController, CanvasViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.tableViewTestController.editTableViewTestKey, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `WatchViewController`, and contains static references to 1 segues.
    struct watchViewController {
      /// Segue identifier `watchDetail`.
      static let watchDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, WatchViewController, CanvasViewController> = Rswift.StoryboardSegueIdentifier(identifier: "watchDetail")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `watchDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func watchDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, WatchViewController, CanvasViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.watchViewController.watchDetail, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `pingan.txt`.
    static let pinganTxt = Rswift.FileResource(bundle: R.hostingBundle, name: "pingan", pathExtension: "txt")

    /// `bundle.url(forResource: "pingan", withExtension: "txt")`
    static func pinganTxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pinganTxt
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 2 images.
  struct image {
    /// Image `RefeshView_arrow`.
    static let refeshView_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "RefeshView_arrow")
    /// Image `icon_wechat`.
    static let icon_wechat = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_wechat")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RefeshView_arrow", bundle: ..., traitCollection: ...)`
    static func refeshView_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.refeshView_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_wechat", bundle: ..., traitCollection: ...)`
    static func icon_wechat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_wechat, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 4 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `MyCell`.
    static let myCell: Rswift.ReuseIdentifier<SearchTableCell> = Rswift.ReuseIdentifier(identifier: "MyCell")
    /// Reuse identifier `alertDetail`.
    static let alertDetail: Rswift.ReuseIdentifier<AlertsCell> = Rswift.ReuseIdentifier(identifier: "alertDetail")
    /// Reuse identifier `editTableViewTest`.
    static let editTableViewTest: Rswift.ReuseIdentifier<EditTableViewTest> = Rswift.ReuseIdentifier(identifier: "editTableViewTest")
    /// Reuse identifier `tableCell`.
    static let tableCell: Rswift.ReuseIdentifier<TableCell> = Rswift.ReuseIdentifier(identifier: "tableCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 35 localization keys.
    struct localizable {
      /// Value: 12h
      static let ks_app_global_text_12h = Rswift.StringResource(key: "ks_app_global_text_12h", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 15m
      static let ks_app_global_text_15m = Rswift.StringResource(key: "ks_app_global_text_15m", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 1d
      static let ks_app_global_text_1d = Rswift.StringResource(key: "ks_app_global_text_1d", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 1h
      static let ks_app_global_text_1h = Rswift.StringResource(key: "ks_app_global_text_1h", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 1m
      static let ks_app_global_text_1m = Rswift.StringResource(key: "ks_app_global_text_1m", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 1w
      static let ks_app_global_text_1w = Rswift.StringResource(key: "ks_app_global_text_1w", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 2h
      static let ks_app_global_text_2h = Rswift.StringResource(key: "ks_app_global_text_2h", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 30m
      static let ks_app_global_text_30m = Rswift.StringResource(key: "ks_app_global_text_30m", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 4h
      static let ks_app_global_text_4h = Rswift.StringResource(key: "ks_app_global_text_4h", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 5m
      static let ks_app_global_text_5m = Rswift.StringResource(key: "ks_app_global_text_5m", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 6h
      static let ks_app_global_text_6h = Rswift.StringResource(key: "ks_app_global_text_6h", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Amount
      static let ks_app_global_text_amount = Rswift.StringResource(key: "ks_app_global_text_amount", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Amount(%@)
      static let ks_app_global_text_amount_currency_unit = Rswift.StringResource(key: "ks_app_global_text_amount_currency_unit", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Book
      static let ks_app_global_text_orderbook = Rswift.StringResource(key: "ks_app_global_text_orderbook", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Buy
      static let ks_app_global_text_buy = Rswift.StringResource(key: "ks_app_global_text_buy", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Buy
      static let ks_app_global_text_buy_up = Rswift.StringResource(key: "ks_app_global_text_buy_up", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Chg%
      static let ks_app_global_text_chg = Rswift.StringResource(key: "ks_app_global_text_chg", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Close
      static let ks_app_global_text_close = Rswift.StringResource(key: "ks_app_global_text_close", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Date
      static let ks_app_global_text_date = Rswift.StringResource(key: "ks_app_global_text_date", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: High
      static let ks_app_global_text_24h_high = Rswift.StringResource(key: "ks_app_global_text_24h_high", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: High
      static let ks_app_global_text_maxhigh = Rswift.StringResource(key: "ks_app_global_text_maxhigh", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Indicator
      static let ks_app_global_text_indicator = Rswift.StringResource(key: "ks_app_global_text_indicator", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Info
      static let ks_app_global_text_info = Rswift.StringResource(key: "ks_app_global_text_info", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Line
      static let ks_app_global_text_line = Rswift.StringResource(key: "ks_app_global_text_line", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Low
      static let ks_app_global_text_24h_low = Rswift.StringResource(key: "ks_app_global_text_24h_low", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Low
      static let ks_app_global_text_maxlow = Rswift.StringResource(key: "ks_app_global_text_maxlow", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Market Trade
      static let ks_app_global_text_market_trade = Rswift.StringResource(key: "ks_app_global_text_market_trade", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Open
      static let ks_app_global_text_open = Rswift.StringResource(key: "ks_app_global_text_open", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Price
      static let ks_app_global_text_price = Rswift.StringResource(key: "ks_app_global_text_price", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Price(%@)
      static let ks_app_global_text_price_currency_unit = Rswift.StringResource(key: "ks_app_global_text_price_currency_unit", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sell
      static let ks_app_global_text_sell = Rswift.StringResource(key: "ks_app_global_text_sell", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sell
      static let ks_app_global_text_sell_up = Rswift.StringResource(key: "ks_app_global_text_sell_up", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Time
      static let ks_app_global_text_time = Rswift.StringResource(key: "ks_app_global_text_time", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Type
      static let ks_app_global_text_type = Rswift.StringResource(key: "ks_app_global_text_type", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Vol
      static let ks_app_global_text_24h_vol = Rswift.StringResource(key: "ks_app_global_text_24h_vol", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: 12h
      static func ks_app_global_text_12h(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ks_app_global_text_12h", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_12h"
        }

        return NSLocalizedString("ks_app_global_text_12h", bundle: bundle, comment: "")
      }

      /// Value: 15m
      static func ks_app_global_text_15m(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ks_app_global_text_15m", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_15m"
        }

        return NSLocalizedString("ks_app_global_text_15m", bundle: bundle, comment: "")
      }

      /// Value: 1d
      static func ks_app_global_text_1d(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ks_app_global_text_1d", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_1d"
        }

        return NSLocalizedString("ks_app_global_text_1d", bundle: bundle, comment: "")
      }

      /// Value: 1h
      static func ks_app_global_text_1h(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ks_app_global_text_1h", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_1h"
        }

        return NSLocalizedString("ks_app_global_text_1h", bundle: bundle, comment: "")
      }

      /// Value: 1m
      static func ks_app_global_text_1m(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ks_app_global_text_1m", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_1m"
        }

        return NSLocalizedString("ks_app_global_text_1m", bundle: bundle, comment: "")
      }

      /// Value: 1w
      static func ks_app_global_text_1w(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ks_app_global_text_1w", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_1w"
        }

        return NSLocalizedString("ks_app_global_text_1w", bundle: bundle, comment: "")
      }

      /// Value: 2h
      static func ks_app_global_text_2h(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ks_app_global_text_2h", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_2h"
        }

        return NSLocalizedString("ks_app_global_text_2h", bundle: bundle, comment: "")
      }

      /// Value: 30m
      static func ks_app_global_text_30m(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ks_app_global_text_30m", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_30m"
        }

        return NSLocalizedString("ks_app_global_text_30m", bundle: bundle, comment: "")
      }

      /// Value: 4h
      static func ks_app_global_text_4h(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ks_app_global_text_4h", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_4h"
        }

        return NSLocalizedString("ks_app_global_text_4h", bundle: bundle, comment: "")
      }

      /// Value: 5m
      static func ks_app_global_text_5m(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ks_app_global_text_5m", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_5m"
        }

        return NSLocalizedString("ks_app_global_text_5m", bundle: bundle, comment: "")
      }

      /// Value: 6h
      static func ks_app_global_text_6h(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ks_app_global_text_6h", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_6h"
        }

        return NSLocalizedString("ks_app_global_text_6h", bundle: bundle, comment: "")
      }

      /// Value: Amount
      static func ks_app_global_text_amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ks_app_global_text_amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_amount"
        }

        return NSLocalizedString("ks_app_global_text_amount", bundle: bundle, comment: "")
      }

      /// Value: Amount(%@)
      static func ks_app_global_text_amount_currency_unit(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("ks_app_global_text_amount_currency_unit", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_amount_currency_unit"
        }

        let format = NSLocalizedString("ks_app_global_text_amount_currency_unit", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Book
      static func ks_app_global_text_orderbook(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ks_app_global_text_orderbook", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_orderbook"
        }

        return NSLocalizedString("ks_app_global_text_orderbook", bundle: bundle, comment: "")
      }

      /// Value: Buy
      static func ks_app_global_text_buy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ks_app_global_text_buy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_buy"
        }

        return NSLocalizedString("ks_app_global_text_buy", bundle: bundle, comment: "")
      }

      /// Value: Buy
      static func ks_app_global_text_buy_up(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ks_app_global_text_buy_up", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_buy_up"
        }

        return NSLocalizedString("ks_app_global_text_buy_up", bundle: bundle, comment: "")
      }

      /// Value: Chg%
      static func ks_app_global_text_chg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ks_app_global_text_chg", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_chg"
        }

        return NSLocalizedString("ks_app_global_text_chg", bundle: bundle, comment: "")
      }

      /// Value: Close
      static func ks_app_global_text_close(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ks_app_global_text_close", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_close"
        }

        return NSLocalizedString("ks_app_global_text_close", bundle: bundle, comment: "")
      }

      /// Value: Date
      static func ks_app_global_text_date(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ks_app_global_text_date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_date"
        }

        return NSLocalizedString("ks_app_global_text_date", bundle: bundle, comment: "")
      }

      /// Value: High
      static func ks_app_global_text_24h_high(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ks_app_global_text_24h_high", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_24h_high"
        }

        return NSLocalizedString("ks_app_global_text_24h_high", bundle: bundle, comment: "")
      }

      /// Value: High
      static func ks_app_global_text_maxhigh(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ks_app_global_text_maxhigh", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_maxhigh"
        }

        return NSLocalizedString("ks_app_global_text_maxhigh", bundle: bundle, comment: "")
      }

      /// Value: Indicator
      static func ks_app_global_text_indicator(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ks_app_global_text_indicator", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_indicator"
        }

        return NSLocalizedString("ks_app_global_text_indicator", bundle: bundle, comment: "")
      }

      /// Value: Info
      static func ks_app_global_text_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ks_app_global_text_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_info"
        }

        return NSLocalizedString("ks_app_global_text_info", bundle: bundle, comment: "")
      }

      /// Value: Line
      static func ks_app_global_text_line(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ks_app_global_text_line", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_line"
        }

        return NSLocalizedString("ks_app_global_text_line", bundle: bundle, comment: "")
      }

      /// Value: Low
      static func ks_app_global_text_24h_low(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ks_app_global_text_24h_low", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_24h_low"
        }

        return NSLocalizedString("ks_app_global_text_24h_low", bundle: bundle, comment: "")
      }

      /// Value: Low
      static func ks_app_global_text_maxlow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ks_app_global_text_maxlow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_maxlow"
        }

        return NSLocalizedString("ks_app_global_text_maxlow", bundle: bundle, comment: "")
      }

      /// Value: Market Trade
      static func ks_app_global_text_market_trade(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ks_app_global_text_market_trade", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_market_trade"
        }

        return NSLocalizedString("ks_app_global_text_market_trade", bundle: bundle, comment: "")
      }

      /// Value: Open
      static func ks_app_global_text_open(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ks_app_global_text_open", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_open"
        }

        return NSLocalizedString("ks_app_global_text_open", bundle: bundle, comment: "")
      }

      /// Value: Price
      static func ks_app_global_text_price(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ks_app_global_text_price", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_price"
        }

        return NSLocalizedString("ks_app_global_text_price", bundle: bundle, comment: "")
      }

      /// Value: Price(%@)
      static func ks_app_global_text_price_currency_unit(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("ks_app_global_text_price_currency_unit", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_price_currency_unit"
        }

        let format = NSLocalizedString("ks_app_global_text_price_currency_unit", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Sell
      static func ks_app_global_text_sell(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ks_app_global_text_sell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_sell"
        }

        return NSLocalizedString("ks_app_global_text_sell", bundle: bundle, comment: "")
      }

      /// Value: Sell
      static func ks_app_global_text_sell_up(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ks_app_global_text_sell_up", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_sell_up"
        }

        return NSLocalizedString("ks_app_global_text_sell_up", bundle: bundle, comment: "")
      }

      /// Value: Time
      static func ks_app_global_text_time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ks_app_global_text_time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_time"
        }

        return NSLocalizedString("ks_app_global_text_time", bundle: bundle, comment: "")
      }

      /// Value: Type
      static func ks_app_global_text_type(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ks_app_global_text_type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_type"
        }

        return NSLocalizedString("ks_app_global_text_type", bundle: bundle, comment: "")
      }

      /// Value: Vol
      static func ks_app_global_text_24h_vol(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ks_app_global_text_24h_vol", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ks_app_global_text_24h_vol"
        }

        return NSLocalizedString("ks_app_global_text_24h_vol", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "Main"
      let viewController = StoryboardViewControllerResource<ViewController>(identifier: "ViewController")
      let watchViewController = StoryboardViewControllerResource<WatchViewController>(identifier: "WatchViewController")

      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }

      func viewController(_: Void = ()) -> ViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: viewController)
      }

      func watchViewController(_: Void = ()) -> WatchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: watchViewController)
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "exclamationmark.square") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'exclamationmark.square' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "folder.badge.gear") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'folder.badge.gear' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "gearshape") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'gearshape' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "list.bullet.rectangle") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'list.bullet.rectangle' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus.circle") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'plus.circle' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "waveform.path.ecg.rectangle") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'waveform.path.ecg.rectangle' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Main' as 'LoginViewController'.") }
        if _R.storyboard.main().viewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'viewController' could not be loaded from storyboard 'Main' as 'ViewController'.") }
        if _R.storyboard.main().watchViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'watchViewController' could not be loaded from storyboard 'Main' as 'WatchViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
