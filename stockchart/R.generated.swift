//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `WatchViewController`, and contains static references to 1 segues.
    struct watchViewController {
      /// Segue identifier `watchDetail`.
      static let watchDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, WatchViewController, CanvasViewController> = Rswift.StoryboardSegueIdentifier(identifier: "watchDetail")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `watchDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func watchDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, WatchViewController, CanvasViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.watchViewController.watchDetail, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `icon_pull_to_refresh_arrow@2x.png`.
    static let icon_pull_to_refresh_arrow2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "icon_pull_to_refresh_arrow@2x", pathExtension: "png")

    /// `bundle.url(forResource: "icon_pull_to_refresh_arrow@2x", withExtension: "png")`
    static func icon_pull_to_refresh_arrow2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.icon_pull_to_refresh_arrow2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 2 images.
  struct image {
    /// Image `RefeshView_arrow`.
    static let refeshView_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "RefeshView_arrow")
    /// Image `icon_pull_to_refresh_arrow`.
    static let icon_pull_to_refresh_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pull_to_refresh_arrow")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RefeshView_arrow", bundle: ..., traitCollection: ...)`
    static func refeshView_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.refeshView_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_pull_to_refresh_arrow", bundle: ..., traitCollection: ...)`
    static func icon_pull_to_refresh_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pull_to_refresh_arrow, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 4 nibs.
  struct nib {
    /// Nib `ESPhotoTableViewCell`.
    static let esPhotoTableViewCell = _R.nib._ESPhotoTableViewCell()
    /// Nib `ESRefreshTableViewCell`.
    static let esRefreshTableViewCell = _R.nib._ESRefreshTableViewCell()
    /// Nib `ListTableViewCell`.
    static let listTableViewCell = _R.nib._ListTableViewCell()
    /// Nib `WebViewController`.
    static let webViewController = _R.nib._WebViewController()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ESPhotoTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.esPhotoTableViewCell) instead")
    static func esPhotoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.esPhotoTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ESRefreshTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.esRefreshTableViewCell) instead")
    static func esRefreshTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.esRefreshTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ListTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.listTableViewCell) instead")
    static func listTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.listTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WebViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.webViewController) instead")
    static func webViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.webViewController)
    }
    #endif

    static func esPhotoTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ESPhotoTableViewCell? {
      return R.nib.esPhotoTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ESPhotoTableViewCell
    }

    static func esRefreshTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ESRefreshTableViewCell? {
      return R.nib.esRefreshTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ESRefreshTableViewCell
    }

    static func listTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ListTableViewCell? {
      return R.nib.listTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ListTableViewCell
    }

    static func webViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.webViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 5 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ESPhotoTableViewCell`.
    static let esPhotoTableViewCell: Rswift.ReuseIdentifier<ESPhotoTableViewCell> = Rswift.ReuseIdentifier(identifier: "ESPhotoTableViewCell")
    /// Reuse identifier `ESRefreshTableViewCell`.
    static let esRefreshTableViewCell: Rswift.ReuseIdentifier<ESRefreshTableViewCell> = Rswift.ReuseIdentifier(identifier: "ESRefreshTableViewCell")
    /// Reuse identifier `ListTableViewCell`.
    static let listTableViewCell: Rswift.ReuseIdentifier<ListTableViewCell> = Rswift.ReuseIdentifier(identifier: "ListTableViewCell")
    /// Reuse identifier `MyCell`.
    static let myCell: Rswift.ReuseIdentifier<SearchTableCell> = Rswift.ReuseIdentifier(identifier: "MyCell")
    /// Reuse identifier `tableCell`.
    static let tableCell: Rswift.ReuseIdentifier<TableCell> = Rswift.ReuseIdentifier(identifier: "tableCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 5 localization keys.
    struct localizable {
      /// Base translation: Loading more
      ///
      /// Locales: zh-Hans, Base, zh-Hant
      static let loadingMore = Rswift.StringResource(key: "Loading more", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "Base", "zh-Hant"], comment: nil)
      /// Base translation: Loading...
      ///
      /// Locales: zh-Hans, Base, zh-Hant
      static let loading = Rswift.StringResource(key: "Loading...", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "Base", "zh-Hant"], comment: nil)
      /// Base translation: No more data
      ///
      /// Locales: zh-Hans, Base, zh-Hant
      static let noMoreData = Rswift.StringResource(key: "No more data", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "Base", "zh-Hant"], comment: nil)
      /// Base translation: Pull to refresh
      ///
      /// Locales: zh-Hans, Base, zh-Hant
      static let pullToRefresh = Rswift.StringResource(key: "Pull to refresh", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "Base", "zh-Hant"], comment: nil)
      /// Base translation: Release to refresh
      ///
      /// Locales: zh-Hans, Base, zh-Hant
      static let releaseToRefresh = Rswift.StringResource(key: "Release to refresh", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "Base", "zh-Hant"], comment: nil)

      /// Base translation: Loading more
      ///
      /// Locales: zh-Hans, Base, zh-Hant
      static func loadingMore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Loading more", bundle: hostingBundle, value: "Loading more", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Loading more"
        }

        return NSLocalizedString("Loading more", bundle: bundle, value: "Loading more", comment: "")
      }

      /// Base translation: Loading...
      ///
      /// Locales: zh-Hans, Base, zh-Hant
      static func loading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Loading...", bundle: hostingBundle, value: "Loading...", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Loading..."
        }

        return NSLocalizedString("Loading...", bundle: bundle, value: "Loading...", comment: "")
      }

      /// Base translation: No more data
      ///
      /// Locales: zh-Hans, Base, zh-Hant
      static func noMoreData(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No more data", bundle: hostingBundle, value: "No more data", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No more data"
        }

        return NSLocalizedString("No more data", bundle: bundle, value: "No more data", comment: "")
      }

      /// Base translation: Pull to refresh
      ///
      /// Locales: zh-Hans, Base, zh-Hant
      static func pullToRefresh(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pull to refresh", bundle: hostingBundle, value: "Pull to refresh", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Pull to refresh"
        }

        return NSLocalizedString("Pull to refresh", bundle: bundle, value: "Pull to refresh", comment: "")
      }

      /// Base translation: Release to refresh
      ///
      /// Locales: zh-Hans, Base, zh-Hant
      static func releaseToRefresh(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Release to refresh", bundle: hostingBundle, value: "Release to refresh", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Release to refresh"
        }

        return NSLocalizedString("Release to refresh", bundle: bundle, value: "Release to refresh", comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _ESPhotoTableViewCell.validate()
      try _ESRefreshTableViewCell.validate()
      try _WebViewController.validate()
    }

    struct _ESPhotoTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ESPhotoTableViewCell

      let bundle = R.hostingBundle
      let identifier = "ESPhotoTableViewCell"
      let name = "ESPhotoTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ESPhotoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ESPhotoTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Photo_Lofter_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Photo_Lofter_1' is used in nib 'ESPhotoTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Photo_Lofter_Info", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Photo_Lofter_Info' is used in nib 'ESPhotoTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Photo_Lofter_Tab", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Photo_Lofter_Tab' is used in nib 'ESPhotoTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon' is used in nib 'ESPhotoTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ESRefreshTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ESRefreshTableViewCell

      let bundle = R.hostingBundle
      let identifier = "ESRefreshTableViewCell"
      let name = "ESRefreshTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ESRefreshTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ESRefreshTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon' is used in nib 'ESRefreshTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ListTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ListTableViewCell

      let bundle = R.hostingBundle
      let identifier = "ListTableViewCell"
      let name = "ListTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ListTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ListTableViewCell
      }

      fileprivate init() {}
    }

    struct _WebViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WebViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "network", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'network' is used in nib 'WebViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ViewController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "exclamationmark.square") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'exclamationmark.square' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "gearshape") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'gearshape' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "list.bullet.rectangle") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'list.bullet.rectangle' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus.circle") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'plus.circle' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "waveform.path.ecg.rectangle") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'waveform.path.ecg.rectangle' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
